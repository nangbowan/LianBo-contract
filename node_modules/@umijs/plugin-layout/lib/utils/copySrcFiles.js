"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _umi() {
  const data = require("umi");

  _umi = function _umi() {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

function _fs() {
  const data = require("fs");

  _fs = function _fs() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = ({
  cwd,
  absTmpPath,
  config
}) => {
  const files = _umi().utils.glob.sync('**/*', {
    cwd
  });

  const base = (0, _path().join)(absTmpPath, 'plugin-layout', 'layout');

  _umi().utils.mkdirp.sync(base);

  files.forEach( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* (file) {
      if (['index.ts', 'runtime.tsx.tpl'].includes(file)) return;
      const source = (0, _path().join)(cwd, file);
      const target = (0, _path().join)(base, file);

      if ((0, _fs().statSync)(source).isDirectory()) {
        _umi().utils.mkdirp.sync(target);
      } else {
        if (target.endsWith('.tpl')) {
          const sourceContent = (0, _fs().readFileSync)(source, 'utf-8');
          yield (0, _fs().writeFileSync)(target.replace(/\.tpl$/, ''), _umi().utils.Mustache.render(sourceContent, config), 'utf-8');
        } else {
          yield (0, _fs().copyFileSync)(source, target);
        }
      }
    });

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
};

exports.default = _default;