export declare type Hash = string;
export declare type BlockNumber = number;
export declare type Account = string;
export declare type AccountKey = string;
export declare type Balance = number;
export declare type Gas = number;
export declare type ContractName = string;
export declare type Timestamp = number;
export declare type Period = number;
export declare type TEEPublicKey = string;
export declare type TEEPassword = string;
export declare type SecretKey = string;
export declare type Token = string;
export declare type BizId = string;
export declare type OrderId = string;
export declare type AccessId = string;
export declare type AccessSecret = string;
export declare type TenantId = string;
export declare type MykmsKeyId = string;
export declare type ContractRaw = string;
export declare type ContractCodeBase64 = string;
export declare enum ContractType {
    assemblyscript = "assemblyscript",
    solidity = "solidity"
}
export declare enum VmType {
    WASM = "WASM",
    EVM = "EVM"
}
export declare enum TxType {
    TX_DEPLOY_CONTRACT = "TX_DEPLOY_CONTRACT",
    CALL_CONTRACT = "CALL_CONTRACT"
}
export declare enum MychainMethods {
    queryBlock = "QueryBlock",
    queryLastBlock = "QueryLastBlock",
    queryTransaction = "QueryTransaction",
    queryTransactionReceipt = "QueryTransactionReceipt",
    queryAccount = "QueryAccount",
    queryContract = "QueryContract",
    deployContract = "DeployContract",
    updateContract = "UpdateContract",
    callContract = "CallContract",
    encryptedTransaction = "EncryptedTransaction",
    LocalTransaction = "LocalTransaction"
}
export declare enum RestMethods {
    queryBlock = "QUERYBLOCKBODY",
    queryBlockHeader = "QUERYBLOCK",
    queryLastBlock = "QUERYLASTBLOCK",
    queryTransactionFromBlockchain = "QUERYTRANSACTIONFROMBLOCKCHAIN",
    queryTransactionReceipt = "QUERYRECEIPT",
    queryAccount = "QUERYACCOUNT",
    queryContract = "QUERYCONTRACT",
    deploySolidityContractForBizAsync = "DEPLOYCONTRACTFORBIZASYNC",
    updateSolidityContractForBizAsync = "UPDATECONTRACTFORBIZASYNC",
    deployWasmContractForBiz = "DEPLOYWASMCONTRACT",
    updateWasmContractForBiz = "UPDATECONTRACTFORBIZ",
    deployWasmContract = "DEPLOYCONTRACT",
    updateWasmContract = "UPDATECONTRACT",
    callWasmContractForBiz = "CALLWASMCONTRACT",
    callWasmContractForBizAsync = "CALLWASMCONTRACTASYNC",
    callWasmContract = "CALLWASMCONTRACT",
    callContract = "CALLCONTRACT",
    createAccountForBiz = "TENANTCREATEACCUNT"
}
export declare const RestMethodsUrlMap: {
    default: string;
    CALLWASMCONTRACT: string;
};
export declare enum WalletMethods {
    queryBlockHeader = "antchain_queryBlockHeader",
    queryBlock = "antchain_queryBlock",
    queryLastBlock = "antchain_queryLastBlock",
    queryTransaction = "antchain_queryTransaction",
    queryTransactionReceipt = "antchain_queryTransactionReceipt",
    queryAccount = "antchain_queryAccount",
    queryContract = "antchain_queryContract",
    sign = "antchain_sign",
    deployContract = "antchain_deployContract",
    deployWasmContract = "antchain_deployWasmContract",
    deploySolidityContract = "antchain_deploySolidityContract",
    callContract = "antchain_callContract",
    callWasmContract = "antchain_callWasmContract",
    callSolidityContract = "antchain_callSolidityContract",
    getProviderState = "antchain_getProviderState",
    requestAccounts = "antchain_requestAccounts",
    subscription = "antchain_subscription"
}
export interface Log {
    from: string;
    logData: string;
    to: string;
    topics: string[];
}
export interface AuthMapItem {
    key: string;
    weight: number;
}
export declare class AntchainSDKError<T = any> extends Error {
    constructor(message: any, code: string, data?: T);
    code?: string;
    data?: T;
}
export declare enum EventListenerType {
    ACCOUNT = 0,
    CONTRACT = 1,
    TOPICS = 2,
    BLOCK = 3
}
