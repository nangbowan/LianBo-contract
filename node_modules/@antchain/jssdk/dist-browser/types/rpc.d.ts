/// <reference types="node" />
import type EventEmitter from 'events';
import type { Duplex } from 'readable-stream';
import type { JsonRpcEngine, JsonRpcId, JsonRpcVersion, JsonRpcError, JsonRpcEngineNextCallback, JsonRpcEngineEndCallback } from 'json-rpc-engine';
export interface RpcInfo {
    id: JsonRpcId;
    jsonrpc: JsonRpcVersion;
}
export interface RpcRequestParams {
    method: string;
    params?: Record<string, any> | any[];
    chainId?: string;
}
export interface RpcResponseResult<T> {
    error?: Error | JsonRpcError;
    result?: T;
}
export declare type RpcRequest = RpcInfo & RpcRequestParams;
export declare type RpcResponse<T = any> = RpcInfo & RpcResponseResult<T>;
export declare type RpcMethodMiddleware = (req: RpcRequest, res: RpcResponse, next: JsonRpcEngineNextCallback, end: JsonRpcEngineEndCallback, options?: Record<string, unknown>) => void;
export declare type RpcMethodMiddlewareWithEngine = (req: RpcRequest, res: RpcResponse, next: JsonRpcEngineNextCallback, end: JsonRpcEngineEndCallback, engine?: JsonRpcEngine) => void;
export interface RpcConnection {
    events: EventEmitter;
    stream: Duplex;
    middleware: RpcMethodMiddleware;
}
