/// <reference types="node" />
import EventEmitter from 'events';
import { Account, AccountKey, Balance, Timestamp, Hash, BlockNumber, Log, AuthMapItem } from "../../../types/web3";
import type { CallContractParams, Contract } from "../../contract";
export interface ProviderInfo {
    username?: string;
}
export declare type RequestParams = any;
export interface RequestArguments {
    method: string;
    params?: RequestParams;
}
export interface CreateAccountParams {
    newAccountName: Account;
    authKey: AccountKey;
    recoveryKey: AccountKey;
}
export interface CreateAccountResponse {
    txHash: Hash;
}
export declare type QueryAccountParams = {
    account: Account;
};
export interface QueryAccountResponse {
    address: string;
    balance: Balance;
    encryptionKey: AccountKey;
    recoveryKey: AccountKey;
    recoveryTime: Timestamp;
    authMap: AuthMapItem[];
    status: number;
    version: number;
}
export interface UpdateAuthMapParams {
    account: Account;
    authMap: AuthMapItem[];
}
export interface UpdateAuthMapResponse {
    txHash: Hash;
}
export interface QueryBlockHeaderParams {
    blockNumber?: BlockNumber;
    hash?: Hash;
}
export interface QueryBlockHeaderResponse {
    gasUsed: number;
    hash: Hash;
    logBloom: string;
    number: number;
    parentHash: string;
    receiptRoot: string;
    stateRoot: string;
    timestamp: number;
    transactionRoot: string;
    version: number;
}
export declare type QueryLastBlockResponse = QueryBlockHeaderResponse;
export interface QueryBlockParams {
    blockNumber?: BlockNumber;
    hash?: Hash;
}
export interface QueryBlockResponse {
    gasUsed: number;
    hash: Hash;
    logBloom: string;
    number: number;
    parentHash: string;
    receiptRoot: string;
    stateRoot: string;
    timestamp: number;
    transactionRoot: string;
    version: number;
    consensusProof: string;
    receiptList: any[];
    transactionList: any[];
}
export interface QueryTransactionParams {
    hash: Hash;
    tee?: boolean;
}
export interface QueryTransactionResponse {
    blockNumber: BlockNumber;
    hash: Hash;
    data: string;
    from: string;
    to: string;
}
export interface QueryTransactionReceiptParams {
    hash: Hash;
    tee?: boolean;
}
export interface QueryTransactionReceiptResponse {
    blockNumber: BlockNumber;
    gasUsed: number;
    output: string;
    code: number;
    logs: Log[];
}
export interface DeployContractParams {
    code?: Buffer;
    gas?: number;
    tee?: boolean;
}
export interface DeployContractResponse {
    txHash: string;
    teeSecret?: string;
}
export declare type ProviderCallContractParams = CallContractParams;
export declare type CallContractResponse<T> = {
    returnValue: T;
    teeSecret?: string;
    txHash: string;
    receiptCode: number;
};
export interface QueryContractParams {
    contractName: string;
}
export interface QueryContractResponse {
    code: string;
    authMap?: AuthMapItem[];
}
export interface SignParams {
    payload: string;
}
export interface SignResponse {
    timestamp?: Timestamp;
    signature: string;
}
export declare const maxQueryTransactionReceiptRetryInterval = 30000;
export declare const queryTransactionReceiptRetryInterval: number[];
export interface TransferBalanceParams {
    from?: Account;
    to: Account;
    value: number;
}
export interface TransferBalanceResponse {
    txHash: Hash;
}
export interface SetRecoverkeyParams {
    account?: Account;
    recoverKey: AccountKey;
}
export interface SetRecoverkeyResponse {
    txHash: Hash;
}
export interface PreResetPubKeyParams {
    account?: Account;
}
export interface PreResetPubKeyResponse {
    txHash: Hash;
}
export interface ResetPubKeyParams {
    account?: Account;
    authKey: AccountKey;
}
export interface ResetPubKeyResponse {
    txHash: Hash;
}
export interface FreezeAccountParams {
}
export interface FreezeAccountResponse {
}
export interface FreezeContractParams {
}
export interface FreezeContractResponse {
}
export interface NativeDepositDataParams {
}
export interface NativeDepositDataResponse {
}
export interface QueryLastBlockHeaderResponse {
    gasUsed: number;
    hash: Hash;
    logBloom: string;
    number: number;
    parentHash: string;
    receiptRoot: string;
    stateRoot: string;
    timestamp: number;
    transactionRoot: string;
    version: number;
}
export interface QueryTransactionListParams {
}
export interface QueryTransactionListResponse {
}
export interface QueryTransactionAndReceiptParams {
}
export interface QueryTransactionAndReceiptResponse {
}
export interface QueryTimestampParams {
}
export interface QueryTimestampResponse {
}
export interface QueryP2PStatusParams {
}
export interface QueryP2PStatusResponse {
}
export interface QueryConsensusStatusParams {
}
export interface QueryConsensusStatusResponse {
}
export interface QueryCommonConsensusStatusParams {
}
export interface QueryCommonConsensusStatusResponse {
}
export interface QuerySyncStatusParams {
}
export interface QuerySyncStatusResponse {
}
export interface QueryTransactionCacheStatus {
}
export interface QueryBlockCacheStatusParams {
}
export interface QueryBlockCacheStatusResponse {
}
export interface QueryContractNodesStatusParams {
}
export interface QueryContractNodesStatusResponse {
}
export interface QueryContractConfigStatusParams {
}
export interface QueryContractConfigStatusResponse {
}
export interface QueryLogLevelParams {
}
export interface QueryLogLevelResponse {
}
export interface UpdateBlackListParams {
}
export interface UpdateBlackListResponse {
}
export interface QueryBlockProofParams {
}
export interface QueryBlockProofResponse {
}
export interface QueryBlockHeaderProofParams {
}
export interface QueryBlockHeaderProofResponse {
}
export interface QueryStateProofParams {
}
export interface QueryStateProofResponse {
}
export interface QueryTransactionProofParams {
}
export interface QueryTransactionProofResponse {
}
export interface QueryReceiptProofParams {
}
export interface QueryReceiptProofResponse {
}
export interface QueryBlockHeaderInfosParams {
}
export interface QueryBlockHeaderInfosResponse {
}
export interface QueryBlockReceiptInfosParams {
}
export interface QueryBlockReceiptInfosResponse {
}
export interface QueryBlockBodyInfosParams {
}
export interface QueryBlockBodyInfosReponse {
}
export interface WatchContractEventParams {
}
export interface WatchContractEventCallbackData {
}
export declare type WatchContractEventCallback = (data: WatchContractEventCallbackData) => void;
export declare abstract class BaseProvider extends EventEmitter {
    abstract majorVersion: number;
    abstract watchContractEvent(contract: Contract, params: WatchContractEventParams, callback: WatchContractEventCallback): void;
    abstract createAccount(params: CreateAccountParams): Promise<CreateAccountResponse>;
    abstract transferBalance(params: TransferBalanceParams): Promise<TransferBalanceResponse>;
    abstract queryAccount(params: QueryAccountParams): Promise<QueryAccountResponse>;
    abstract setRecoverkey(params: SetRecoverkeyParams): Promise<SetRecoverkeyResponse>;
    abstract preResetPubKey(params: PreResetPubKeyParams): Promise<PreResetPubKeyResponse>;
    abstract resetPubKey(params: ResetPubKeyParams): Promise<ResetPubKeyResponse>;
    abstract freezeAccount(params: FreezeAccountParams): Promise<FreezeAccountResponse>;
    abstract freezeContract(params: FreezeContractParams): Promise<FreezeContractResponse>;
    abstract nativeDepositData(params: NativeDepositDataParams): Promise<NativeDepositDataResponse>;
    abstract queryLastBlockHeader(): Promise<QueryLastBlockHeaderResponse>;
    abstract queryTransactionList(params: QueryTransactionListParams): Promise<QueryTransactionListResponse>;
    abstract queryTransactionAndReceipt(params: QueryTransactionAndReceiptParams): Promise<QueryTransactionAndReceiptResponse>;
    abstract queryTimestamp(params: QueryTimestampParams): Promise<QueryTimestampResponse>;
    abstract queryP2PStatus(params: QueryP2PStatusParams): Promise<QueryP2PStatusResponse>;
    abstract queryConsensusStatus(params: QueryConsensusStatusParams): Promise<QueryConsensusStatusResponse>;
    abstract queryCommonConsensusStatus(params: QueryCommonConsensusStatusParams): Promise<QueryCommonConsensusStatusResponse>;
    abstract querySyncStatus(params: QuerySyncStatusParams): Promise<QuerySyncStatusResponse>;
    abstract queryTransactionCacheStatus(params: QueryTransactionCacheStatus): Promise<QueryTransactionCacheStatus>;
    abstract queryBlockCacheStatus(params: QueryBlockCacheStatusParams): Promise<QueryBlockCacheStatusResponse>;
    abstract queryContractNodesStatus(params: QueryContractNodesStatusParams): Promise<QueryContractNodesStatusResponse>;
    abstract queryContractConfigStatus(params: QueryContractConfigStatusParams): Promise<QueryContractConfigStatusResponse>;
    abstract queryLogLevel(params: QueryLogLevelParams): Promise<QueryLogLevelResponse>;
    abstract updateBlackList(params: UpdateBlackListParams): Promise<UpdateBlackListResponse>;
    abstract queryBlockProof(params: QueryBlockProofParams): Promise<QueryBlockProofResponse>;
    abstract queryBlockHeaderProof(params: QueryBlockHeaderProofParams): Promise<QueryBlockHeaderProofResponse>;
    abstract queryStateProof(params: QueryStateProofParams): Promise<QueryStateProofResponse>;
    abstract queryTransactionProof(params: QueryTransactionProofParams): Promise<QueryTransactionProofResponse>;
    abstract queryReceiptProof(params: QueryReceiptProofParams): Promise<QueryReceiptProofResponse>;
    abstract queryBlockHeaderInfos(params: QueryBlockHeaderInfosParams): Promise<QueryBlockHeaderInfosResponse>;
    abstract queryBlockReceiptInfos(params: QueryBlockReceiptInfosParams): Promise<QueryBlockReceiptInfosResponse>;
    abstract queryBlockBodyInfos(params: QueryBlockBodyInfosParams): Promise<QueryBlockBodyInfosReponse>;
    abstract updateAuthMap(params: UpdateAuthMapParams): Promise<UpdateAuthMapResponse>;
    abstract queryBlockHeader(params: QueryBlockHeaderParams): Promise<QueryBlockHeaderResponse>;
    abstract queryBlock(params: QueryBlockParams): Promise<QueryBlockResponse>;
    abstract queryLastBlock(): Promise<QueryLastBlockResponse>;
    abstract queryTransaction(params: QueryTransactionParams): Promise<QueryTransactionResponse>;
    abstract queryTransactionReceipt(params: QueryTransactionReceiptParams): Promise<QueryTransactionReceiptResponse>;
    abstract deployContract(contract: Contract, params: DeployContractParams): Promise<DeployContractResponse>;
    abstract updateContract(contract: Contract, params: DeployContractParams): Promise<DeployContractResponse>;
    abstract callContract<ReturnType = any>(contract: Contract, params: ProviderCallContractParams): Promise<CallContractResponse<ReturnType>>;
    abstract queryContract(params?: QueryContractParams): Promise<QueryContractResponse>;
    abstract sign(params: SignParams): Promise<SignResponse>;
    queryTransactionReceiptWithRetry(params: QueryTransactionReceiptParams, stopTime?: number, // 结束请求的时间，用于设定超时
    leftTimes?: number): Promise<QueryTransactionReceiptResponse>;
}
