import { TEEPassword, TEEPublicKey } from "../../../types/web3";
import { BaseProvider, CreateAccountParams, CreateAccountResponse, QueryAccountParams, QueryAccountResponse, UpdateAuthMapParams, UpdateAuthMapResponse, QueryBlockHeaderParams, QueryBlockHeaderResponse, QueryBlockParams, QueryBlockResponse, QueryLastBlockResponse, QueryTransactionParams, QueryTransactionResponse, DeployContractParams, DeployContractResponse, ProviderCallContractParams, CallContractResponse, QueryTransactionReceiptParams, QueryTransactionReceiptResponse, QueryContractParams, QueryContractResponse, QueryBlockBodyInfosReponse, QueryBlockBodyInfosParams, QueryBlockReceiptInfosResponse, QueryBlockReceiptInfosParams, QueryBlockHeaderInfosResponse, QueryBlockHeaderInfosParams, QueryReceiptProofResponse, QueryReceiptProofParams, QueryTransactionProofResponse, QueryTransactionProofParams, QueryStateProofResponse, QueryStateProofParams, QueryBlockHeaderProofResponse, QueryBlockHeaderProofParams, QueryBlockProofResponse, QueryBlockProofParams, UpdateBlackListResponse, UpdateBlackListParams, QueryLogLevelResponse, QueryLogLevelParams, QueryContractConfigStatusResponse, QueryContractConfigStatusParams, QueryContractNodesStatusResponse, QueryContractNodesStatusParams, QueryBlockCacheStatusResponse, QueryBlockCacheStatusParams, QueryTransactionCacheStatus, QuerySyncStatusResponse, QuerySyncStatusParams, QueryCommonConsensusStatusResponse, QueryCommonConsensusStatusParams, QueryConsensusStatusResponse, QueryConsensusStatusParams, QueryP2PStatusResponse, QueryTimestampResponse, QueryTimestampParams, QueryTransactionAndReceiptResponse, QueryTransactionAndReceiptParams, QueryTransactionListResponse, QueryTransactionListParams, QueryLastBlockHeaderResponse, NativeDepositDataResponse, NativeDepositDataParams, FreezeContractResponse, FreezeContractParams, FreezeAccountResponse, FreezeAccountParams, ResetPubKeyResponse, ResetPubKeyParams, PreResetPubKeyResponse, PreResetPubKeyParams, SetRecoverkeyResponse, SetRecoverkeyParams, TransferBalanceResponse, TransferBalanceParams, QueryP2PStatusParams, WatchContractEventParams, WatchContractEventCallback, SignParams, SignResponse } from '../base-provider';
import { Contract } from "../../contract";
export interface ChainProviderConfig {
    host?: string;
    port?: number;
    timeout?: number;
    ca?: string;
    cert?: string;
    privateKey?: string;
    privateKeyPassword?: string;
    account?: string;
    accountPrivateKey?: string;
    accountPrivateKeyPassword?: string;
    accountRecoverPrivateKey?: string;
    accountRecoverPrivateKeyPassword?: string;
    teePublicKey?: TEEPublicKey;
    teePassword?: TEEPassword;
}
export declare class ChainProvider extends BaseProvider {
    majorVersion: number;
    private config;
    private teeExtraParams;
    private connector;
    private eventsId;
    private EVENTLOOPTIME;
    private eventTimeout;
    constructor(config?: ChainProviderConfig);
    private startEventLoop;
    private fetchEvents;
    watchContractEvent(contract: Contract, params: WatchContractEventParams, callback: WatchContractEventCallback): void;
    createAccount(params: CreateAccountParams): Promise<CreateAccountResponse>;
    transferBalance(params: TransferBalanceParams): Promise<TransferBalanceResponse>;
    setRecoverkey(params: SetRecoverkeyParams): Promise<SetRecoverkeyResponse>;
    preResetPubKey(params: PreResetPubKeyParams): Promise<PreResetPubKeyResponse>;
    resetPubKey(params: ResetPubKeyParams): Promise<ResetPubKeyResponse>;
    freezeAccount(params: FreezeAccountParams): Promise<FreezeAccountResponse>;
    freezeContract(params: FreezeContractParams): Promise<FreezeContractResponse>;
    nativeDepositData(params: NativeDepositDataParams): Promise<NativeDepositDataResponse>;
    queryLastBlockHeader(): Promise<QueryLastBlockHeaderResponse>;
    queryTransactionList(params: QueryTransactionListParams): Promise<QueryTransactionListResponse>;
    queryTransactionAndReceipt(params: QueryTransactionAndReceiptParams): Promise<QueryTransactionAndReceiptResponse>;
    queryTimestamp(params: QueryTimestampParams): Promise<QueryTimestampResponse>;
    queryP2PStatus(params: QueryP2PStatusParams): Promise<QueryP2PStatusResponse>;
    queryConsensusStatus(params: QueryConsensusStatusParams): Promise<QueryConsensusStatusResponse>;
    queryCommonConsensusStatus(params: QueryCommonConsensusStatusParams): Promise<QueryCommonConsensusStatusResponse>;
    querySyncStatus(params: QuerySyncStatusParams): Promise<QuerySyncStatusResponse>;
    queryTransactionCacheStatus(params: QueryTransactionCacheStatus): Promise<QueryTransactionCacheStatus>;
    queryBlockCacheStatus(params: QueryBlockCacheStatusParams): Promise<QueryBlockCacheStatusResponse>;
    queryContractNodesStatus(params: QueryContractNodesStatusParams): Promise<QueryContractNodesStatusResponse>;
    queryContractConfigStatus(params: QueryContractConfigStatusParams): Promise<QueryContractConfigStatusResponse>;
    queryLogLevel(params: QueryLogLevelParams): Promise<QueryLogLevelResponse>;
    updateBlackList(params: UpdateBlackListParams): Promise<UpdateBlackListResponse>;
    queryBlockProof(params: QueryBlockProofParams): Promise<QueryBlockProofResponse>;
    queryBlockHeaderProof(params: QueryBlockHeaderProofParams): Promise<QueryBlockHeaderProofResponse>;
    queryStateProof(params: QueryStateProofParams): Promise<QueryStateProofResponse>;
    queryTransactionProof(params: QueryTransactionProofParams): Promise<QueryTransactionProofResponse>;
    queryReceiptProof(params: QueryReceiptProofParams): Promise<QueryReceiptProofResponse>;
    queryBlockHeaderInfos(params: QueryBlockHeaderInfosParams): Promise<QueryBlockHeaderInfosResponse>;
    queryBlockReceiptInfos(params: QueryBlockReceiptInfosParams): Promise<QueryBlockReceiptInfosResponse>;
    queryBlockBodyInfos(params: QueryBlockBodyInfosParams): Promise<QueryBlockBodyInfosReponse>;
    queryAccount({ account }: QueryAccountParams): Promise<QueryAccountResponse>;
    updateAuthMap(params: UpdateAuthMapParams): Promise<UpdateAuthMapResponse>;
    queryBlockHeader({ blockNumber, hash, }: QueryBlockHeaderParams): Promise<QueryBlockHeaderResponse>;
    queryBlock({ blockNumber, hash }: QueryBlockParams): Promise<QueryBlockResponse>;
    queryLastBlock(): Promise<QueryLastBlockResponse>;
    queryTransaction({ hash, tee }: QueryTransactionParams): Promise<QueryTransactionResponse>;
    queryTransactionReceipt(params: QueryTransactionReceiptParams): Promise<QueryTransactionReceiptResponse>;
    deployContract(contract: Contract, options: DeployContractParams): Promise<DeployContractResponse>;
    updateContract(contract: Contract, options: DeployContractParams): Promise<DeployContractResponse>;
    callContract<ReturnType = any>(contract: Contract, options: ProviderCallContractParams): Promise<CallContractResponse<ReturnType>>;
    queryContract(options: QueryContractParams): Promise<QueryContractResponse>;
    sign(params: SignParams): Promise<SignResponse>;
}
