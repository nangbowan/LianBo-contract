/// <reference types="node" />
import tls from 'tls';
declare class TLS {
    callback: (err: any, data: any) => void;
    sendCallback: (err: any, data: any) => void;
    retryNum: number;
    clients: {
        port: number;
        host: string;
    }[];
    currentClient: number;
    host: string;
    port: number;
    timeout: number;
    cert: string;
    ca: string;
    key: string;
    passphrase: string;
    checkServerIdentity: () => void;
    socket: any;
    constructor({ host, port, clients, timeout, cert, ca, key, passphrase, checkServerIdentity, sendCallback }: {
        host: any;
        port: any;
        clients: any;
        timeout: any;
        cert: any;
        ca: any;
        key: any;
        passphrase: any;
        checkServerIdentity: any;
        sendCallback: any;
    }, callback: any);
    doCallback(err?: () => void, data?: any): void;
    setConfig({ host, port, timeout, cert, ca, key, passphrase, checkServerIdentity }: {
        host: any;
        port: any;
        timeout: any;
        cert: any;
        ca: any;
        key: any;
        passphrase: any;
        checkServerIdentity: any;
    }): void;
    connect(): tls.TLSSocket;
    resetConnect(opt: any): void;
    send(data: any): void;
}
declare const TLSType: {
    (opt: any, callback: any): TLS;
    setEcdhCurve(ecdhCurve: any): void;
    setPrime256v1EcdhCurve(): void;
};
export default TLSType;
