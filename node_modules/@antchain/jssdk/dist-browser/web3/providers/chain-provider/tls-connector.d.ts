import { BaseData } from "../../../types/mychain";
import { Buffer as SafeBuffer } from 'safe-buffer';
export interface TLSConnectorOptions {
    host: string;
    port: number;
    clients?: {
        host: string;
        port: number;
    }[];
    timeout?: number;
    cert?: string;
    ca?: string;
    key?: string;
    passphrase?: string;
    checkServerIdentity?: () => void;
    nonce?: string;
    account?: string;
    accountPrivateKey?: string;
    accountPrivateKeyPassword?: string;
    accountRecoverPrivateKey?: string;
    accountRecoverPrivateKeyPassword?: string;
    isSign?: boolean;
}
export declare class TLSConnector {
    sender: any;
    callbacks: {
        [sequence: string]: (err: Error, data: any) => void;
    };
    sendCache: {
        sequence: string;
        rlpData: any[];
    }[];
    sessionId: string;
    callback: (err: Error | null, data: any) => void;
    currentSequence: number;
    userPublicKey: SafeBuffer;
    userSignature: SafeBuffer;
    userPrivateKey: SafeBuffer;
    userRecoverPrivateKey: SafeBuffer;
    userRecoverPublicKey: SafeBuffer;
    options: TLSConnectorOptions;
    userKeySeted: boolean;
    constructor(opt: TLSConnectorOptions, callback?: (err: Error | null, data?: any) => void);
    setUserKey: () => Promise<void>;
    sendCallback: (err: any, rlpData: any) => void;
    getSequence: () => number;
    getBaseData: () => Promise<BaseData>;
    send(rlpRawData: any[], sequence: number): Promise<any>;
    _send: (rlpRawData: any[]) => void;
    handshake: () => Promise<void>;
}
