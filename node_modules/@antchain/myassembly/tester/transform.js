const { TransformVisitor, utils } = require('@antchain/deps/visitor-as');
const { Parser, CommonFlags } = require('@antchain/deps/visitor-as/as');

const mockFunctions = [
  // account
  'getOrigin',
  'getSender',
  'getSelf',
  'checkAccount',
  'getAccountStatus',
  'getBalance',
  'getRecoverKey',
  'getAuthMap',

  // block
  'getBlockNumber',
  'getBlockTimeStamp',
  'getBlockHash',

  // contract
  'getGas',
  'getValue',
  'getCode',
  'getCodeHash',

  // general
  'digest',
  'getTargetAddress',

  // transaction
  'isLocalTx',
  'getTxHash',
  'getData',
  'getRelatedTxListSize',
  'getRelatedTxList',
  'getTxSender',
  'getTxReceiver',
  'getTxData',
  'getTxTimestamp',
  'getTxBlockIndex',
  'getTxDepositFlag',
  'getConfidentialDepositData',
  'getConfidentialDepositFlag',
];

function getStatements(code, path) {
  const parser = new Parser();
  parser.parseFile(code, path + '.ts', true);
  return parser.sources[0].statements;
}

function changeFunctionBody(node, code) {
  const path = node.range.source.internalPath;
  node.body.statements = getStatements(code, path);
}

module.exports = class extends TransformVisitor {
  // 给每个文件都 import mock
  visitSource(node) {
    node.statements = [
      ...getStatements(`import { mock } from '..';`, node.internalPath),
      ...node.statements,
    ];
    return super.visitSource(node);
  }

  // 把要 mock 的函数里的代码改掉
  visitFunctionDeclaration(node) {
    const name = utils.getName(node);
    const params = node.signature.parameters.map((p) => utils.getName(p)).join(',');
    if (node.is(CommonFlags.EXPORT) && mockFunctions.indexOf(name) !== -1) {
      const code = `
        if (mock.my.${name}.cacheFn != null) {
          return mock.my.${name}.cacheFn(${params});
        } else {
          return mock.my.${name}.cacheReturnValue;
        }
      `;
      changeFunctionBody(node, code);
    }
    if (node.is(CommonFlags.EXPORT) && name === 'println<T>') {
      changeFunctionBody(node, `log(${params});`);
    }
    return super.visitFunctionDeclaration(node);
  }

  afterParse({ sources }) {
    // 遍历 my.xxx 的代码
    const chainSources = sources.filter((s) => s.internalPath.indexOf('myassembly/chain/') !== -1);
    this.visit(chainSources);

    // 查看生成的代码
    // chainSources.forEach((s) => {
    //   console.log('🐟🐟🐟🐟🐟🐟🐟🐟🐟🐟\n');
    //   console.log(s.internalPath + '\n');
    //   console.log(utils.toString(s));
    // });
  }
};
