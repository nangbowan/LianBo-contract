import { getBytes, bytesToDataView } from './bytes';
import { isTypedArray } from './general';

/**
 * 根据数据获取字符串，主要用于打印展示
 * @param value
 * @returns string
 */
export function getDisplayString<T>(value: T): string {
  let str = '';

  if (isString<T>(value)) {
    str = value as string;
  }

  if (isInteger<T>(value) || isFloat<T>(value)) {
    str = value.toString();
  }

  if (value instanceof ArrayBuffer) {
    const bytes = Uint8Array.wrap(value);
    str = bytesToDisplayString(bytes);
  }

  if (isTypedArray(value)) {
    const bytes = getBytes(value);
    str = bytesToDisplayString(bytes);
  }

  if (value instanceof Array) {
    str = arrayToDisplayString(value);
  }

  return str;
}

/**
 * 根据数据获取字符串，主要用于打印展示
 * @param value
 * @returns string
 */
export function arrayToDisplayString<T>(arr: T[]): string {
  let strArr = new Array<string>();

  for (let i = 0; i < arr.length; i += 1) {
    strArr.push(getDisplayString(arr[i]));
  }

  // 如果元素是字符串，加上引号
  if (isString<T>()) {
    strArr = strArr.map<string>((str) => `'${str}'`);
  }

  return `[${strArr.join(', ')}] [length: ${strArr.length}]`;
}

/**
 * 把字节码转成 16 进制的字符串，主要用于打印展示
 * @param bytes 字节码
 * @returns 字符串
 */
export function bytesToDisplayString(bytes: Uint8Array): string {
  const dv = bytesToDataView(bytes);

  // 把每个字节都转成 16 进制的字符串
  let res = '';
  for (let i = 0; i < dv.byteLength; i += 1) {
    const str = dv.getUint8(i).toString(16).toUpperCase();
    const pre = str.length === 1 ? '0' : '';
    res += ` ${pre}${str}`;
  }

  // 格式参考 NodeJS
  return `<Buffer${res}> [length: ${dv.byteLength}]`;
}
