/**
 * 判断是不是 TypedArray
 * @param value
 * @returns bool
 */
export function isTypedArray<T>(value: T): bool {
  return (
    value instanceof Int8Array ||
    value instanceof Int16Array ||
    value instanceof Int32Array ||
    value instanceof Int64Array ||
    value instanceof Uint8Array ||
    value instanceof Uint16Array ||
    value instanceof Uint32Array ||
    value instanceof Uint64Array ||
    value instanceof Uint8ClampedArray ||
    value instanceof Float32Array ||
    value instanceof Float64Array ||
    false
  );
}

/**
 * 分配一个存放 length 的空间，在和链交互时很常用
 * @param length u32 长度值，默认为 0
 * @returns ptr u32
 */
export function allocLength(length: u32 = 0): u32 {
  const ptr = new Uint32Array(1).dataStart as u32;
  store<u32>(ptr, length);
  return ptr;
}

/**
 * 分配一段数据空间，返回值里的几个字段在和链交互时很常用
 * @param length 字节码长度
 */
export function allocData(length: u32): AllocatedData {
  const bytes = new Uint8Array(length);
  const lengthPtr = allocLength(length);

  return {
    bytes,
    ptr: bytes.dataStart as u32,
    length,
    lengthPtr,
  };
}

@unmanaged
class AllocatedData {
  bytes: Uint8Array;
  ptr: u32;
  length: u32;
  lengthPtr: u32;
}
