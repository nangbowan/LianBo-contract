import { IDRC721, DRC721_AssetMeta } from './standard';
import { StorageMap, JSON, my, assert } from '../..';

export abstract class DRC721_draft extends IDRC721 {
  // 存储 Map: assetId => DigitalAsset JSON string
  protected assets: StorageMap<string, string> = new StorageMap<string, string>(
    'assets',
    new Map(),
  );

  // 存储 Map: assetId => owner address
  protected owners: StorageMap<string, string> = new StorageMap<string, string>(
    'owners',
    new Map(),
  );

  // 存储 Map: owner address => assetId array
  protected balances: StorageMap<string, string[]> = new StorageMap<string, string[]>(
    'balances',
    new Map(),
  );

  // 资产元信息，需要用户自己定义
  protected assetMeta: DRC721_AssetMeta;

  constructor(assetMeta: DRC721_AssetMeta) {
    super();
    this.assetMeta = assetMeta;
  }

  @EXPORT
  public AssetMeta(): string {
    const assetMetaObj = JSON.Value.Object();
    assetMetaObj.set('issuer', this.assetMeta.issuer);
    if (this.assetMeta.description != null) {
      assetMetaObj.set('description', this.assetMeta.description);
    }
    if (this.assetMeta.baseUri != null) {
      assetMetaObj.set('baseUri', this.assetMeta.baseUri);
    }
    return assetMetaObj.toString();
  }

  @EXPORT
  public GetAsset(assetId: string): string {
    const assetStr = this.assets.getItem(assetId);
    assert(assetStr != null, `[DRC721] GetAsset: assetId "${assetId}" not exist`);
    return assetStr as string;
  }

  @EXPORT
  public OwnerOf(assetId: string): string {
    const owner = this.owners.getItem(assetId);
    assert(owner != null, `[DRC721] OwnerOf: assetId "${assetId}" not exist`);
    return owner as string;
  }

  @EXPORT
  public Issue(owner: string, assetStr: string): void {
    assert(
      my.getSender().str == this.assetMeta.issuer,
      '[DRC721] Issue: only issuer can issue asset',
    );
    this.issue(owner, assetStr);
  }

  
  @EXPORT
  public ReplaceIssue(owner:string,assetStr:string):void {

    assert(
      my.getSender().str == this.assetMeta.issuer,
      '[DRC721] Issue: only issuer can issue asset',
    );

    this.replaceIssue(owner,assetStr);
    
  }

  @EXPORT
  public Transfer(to: string, assetId: string): void {
    assert(
      my.getSender().str == this.assetMeta.issuer,
      '[DRC721] Transfer: only issuer can transfer asset',
    );

    const from = this.owners.getItem(assetId);
    assert(from != null, `[DRC721] Transfer: assetId "${assetId}" not exist`);

    // 删除 from 账户余额里的资产
    const fromBalance = this.balances.getItem(from as string) as string[];
    fromBalance.splice(fromBalance.indexOf(assetId), 1);
    this.balances.setItem(from as string, fromBalance);

    // 给 to 账户余额里添加资产
    const toBalance = this.balances.getItem(to);
    if (toBalance == null) {
      this.balances.setItem(to, [assetId]);
    } else {
      this.balances.setItem(to, toBalance.concat([assetId]));
    }

    // 修改资产的拥有者
    this.owners.setItem(assetId, to);
  }

  @EXPORT
  public HasAsset(owner: string, assetId: string): bool {
    const assetOwner = this.owners.getItem(assetId);
    return assetOwner != null && assetOwner == owner;
  }

  @EXPORT
  public AssetCount(owner: string): u64 {
    const balance = this.balances.getItem(owner);
    return balance == null ? 0 : balance.length;
  }

  /**
   * 非 DRC-721 规范
   * 获取已发行的资产总数
   * @returns u32
   */
  @EXPORT
  public TotalAssetCount(): u32 {
    return this.assets.getData().size;
  }

  /**
   * 非 DRC-721 规范
   * 获取指定账户的所有资产，包括详细信息
   * @param owner
   * @returns DigitalAsset Array JSON string
   */
  @EXPORT
  public GetAssets(owner: string): string {
    let balance = this.balances.getItem(owner);
    balance = balance == null ? [] : balance;

    const assetArr = JSON.Value.Array();
    for (let i = 0; i < balance.length; i++) {
      const assetId = balance[i];
      const assetStr = this.GetAsset(assetId);
      const assetObj = this.parseAsset(assetStr);
      assetArr.push(assetObj);
    }
    return assetArr.toString();
  }

  /**
   * 
   * @param owner 钱包地址
   * @param assetInfo 存储随机粒子
   * @param assetUri 图片链接
   * @returns 
   */
  protected replaceIssue(owner:string,assetStr:string):void{
    const assetObj = this.parseAsset(assetStr);
    const assetId = "1";
    assetObj.set('assetId', assetId);

    this.assets.setItem(assetId, assetObj.toString());
    this.owners.setItem(assetId, owner);

    this.balances.setItem(owner, [assetId]);
    
  }

  /**
   * 发放资产
   * @param owner 发放的账户地址
   * @param asset 资产信息 AssetDetail JSON string
   */
  protected issue(owner: string, assetStr: string): void {
    const assetObj = this.parseAsset(assetStr);
    const assetId = this.generateAssetId();
    assetObj.set('assetId', assetId);

    this.assets.setItem(assetId, assetObj.toString());
    this.owners.setItem(assetId, owner);

    const balance = this.balances.getItem(owner);
    if (balance == null) {
      this.balances.setItem(owner, [assetId]);
    } else {
      this.balances.setItem(owner, balance.concat([assetId]));
    }
  }

  /**
   * 根据 JSON string 解析出对象
   * @param assetStr AssetDetail JSON string
   * @returns AssetDetail object
   */
  protected parseAsset(assetStr: string): JSON.Obj {
    const assetObj = JSON.parse(assetStr) as JSON.Obj;

    // 检查字段
    const assetInfo = assetObj.getValue('assetInfo');
    const assetUri = assetObj.getValue('assetUri');
    assert(
      assetInfo != null || assetUri != null,
      '[DRC721] parseAsset: asset must has assetInfo or assetUri',
    );

    return assetObj;
  }

  /**
   * 生成新的 assetId
   * 暂时使用整数自增的方案，从 1 开始
   * @returns string
   */
  protected generateAssetId(): string {
    return (this.assets.getData().size + 1).toString();
  }
}
