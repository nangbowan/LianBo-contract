import { JSON } from '../..';
import { DRC721_draft } from '.';

const owner1 = 'owner-address-1-123456789012345678901234567890123456789012345678';
const owner2 = 'owner-address-2-123456789012345678901234567890123456789012345678';

class Contract extends DRC721_draft {
  constructor() {
    super({
      issuer: '1234567890123456789012345678901234567890123456789012345678901234',
      description: 'This is a test contract',
      baseUri: 'https://ipfs.antchain.antgroup.com/myfish',
    });

    // mock some storage data
    this.assets.setItem('1', '{"assetInfo":"asset-info-1","assetUri":"asset-uri-1","assetId":"1"}');
    this.assets.setItem('2', '{"assetInfo":"asset-info-2","assetUri":"asset-uri-2","assetId":"2"}');
    this.assets.setItem('3', '{"assetInfo":"asset-info-3","assetUri":"asset-uri-3","assetId":"3"}');
    this.owners.setItem('1', owner1);
    this.owners.setItem('2', owner1);
    this.owners.setItem('3', owner2);
    this.balances.setItem(owner1, ['1', '2']);
    this.balances.setItem(owner2, ['3']);
  }

  // protected => public for test
  public public_parseAsset(assetStr: string): JSON.Obj {
    return this.parseAsset(assetStr);
  }

  // protected => public for test
  public public_generateAssetId(): string {
    return this.generateAssetId();
  }
}

let contract: Contract;
beforeEach(() => {
  contract = new Contract();
});

describe('DRC721', () => {
  test('AssetMeta', () => {
    expect(contract.AssetMeta()).toBe(
      `{"issuer":"1234567890123456789012345678901234567890123456789012345678901234","description":"This is a test contract","baseUri":"https://ipfs.antchain.antgroup.com/myfish"}`,
    );
  });

  test('GetAsset', () => {
    expect(contract.GetAsset('1')).toBe(
      `{"assetInfo":"asset-info-1","assetUri":"asset-uri-1","assetId":"1"}`,
    );
  });

  test('OwnerOf', () => {
    expect(contract.OwnerOf('1')).toBe(owner1);
  });

  test('HasAsset', () => {
    expect(contract.HasAsset(owner1, '1')).toBeTruthy();
    expect(contract.HasAsset(owner1, '3')).toBeFalsy();
  });

  test('AssetCount', () => {
    expect(contract.AssetCount(owner1)).toBe(2);
    expect(contract.AssetCount(owner2)).toBe(1);

    const ownerNotExist = '123456789012345678901234567890123456789012345678901234567890abcd';
    expect(contract.AssetCount(ownerNotExist)).toBe(0);
  });

  test('Issue + GetAssets', () => {
    contract.Issue(owner2, '{"assetInfo":"asset-info-4","assetUri":"asset-uri-4"}');
    expect(contract.GetAsset('4')).toBe(
      '{"assetInfo":"asset-info-4","assetUri":"asset-uri-4","assetId":"4"}',
    );
    expect(contract.OwnerOf('4')).toBe(owner2);
    expect(contract.GetAssets(owner2)).toBe(
      '[{"assetInfo":"asset-info-3","assetUri":"asset-uri-3","assetId":"3"},{"assetInfo":"asset-info-4","assetUri":"asset-uri-4","assetId":"4"}]',
    );
  });

  test('Transfer + GetAssets', () => {
    contract.Transfer(owner2, '2');
    expect(contract.OwnerOf('2')).toBe(owner2);
    expect(contract.GetAssets(owner1)).toBe(
      '[{"assetInfo":"asset-info-1","assetUri":"asset-uri-1","assetId":"1"}]',
    );
    expect(contract.GetAssets(owner2)).toBe(
      '[{"assetInfo":"asset-info-3","assetUri":"asset-uri-3","assetId":"3"},{"assetInfo":"asset-info-2","assetUri":"asset-uri-2","assetId":"2"}]',
    );
  });

  test('TotalAssetCount', () => {
    expect(contract.TotalAssetCount()).toBe(3);
  });

  test('parseAsset', () => {
    const obj1 = JSON.Value.Object();
    obj1.set('assetInfo', 'asset-info-string');
    obj1.set('assetUri', 'asset-uri-string');
    expect(
      contract.public_parseAsset(`{"assetInfo":"asset-info-string","assetUri":"asset-uri-string"}`),
    ).toStrictEqual(obj1);

    // mock an object value
    const info = JSON.Value.Object();
    info.set('key', 'value');

    const obj2 = JSON.Value.Object();
    obj2.set('assetInfo', info);
    expect(contract.public_parseAsset(`{"assetInfo":{"key":"value"}}`)).toStrictEqual(obj2);

    const obj3 = JSON.Value.Object();
    obj3.set('assetUri', 'asset-uri-string');
    expect(contract.public_parseAsset(`{"assetUri":"asset-uri-string"}`)).toStrictEqual(obj3);

    expect(() => {
      contract.public_parseAsset(`{"test":"no assetInfo and assetUri"}`);
    }).toThrow();
  });

  test('generateAssetId', () => {
    expect(contract.public_generateAssetId()).toBe('4');
  });
});
