import { ENV, SerializeHelper, Identity, Variant, utils } from '../..';

@unmanaged
export class CallContractArgs {
  id: Identity;
  method: string;
  params: Variant[];
  value: u64;
  gas: u64;
}

@unmanaged
export class CallContractResult<T> {
  code: u32;
  message: string | null;
  data: T | null;
}

export abstract class BaseContract {
  // TODO
  public saveData(): void {}
  public loadData(): void {}
  public delegateCall(): void {}

  // 调用其它合约
  public callContract<T>(args: CallContractArgs): CallContractResult<T> {
    // 保存当前的合约数据
    this.saveData();

    const methodBytes = utils.getBytes(args.method);
    const paramBytes = SerializeHelper.getParamBytes(args.params);

    let code = ENV.CallContract(
      args.id.ptr,
      args.id.length,
      methodBytes.dataStart as u32,
      methodBytes.byteLength,
      args.value,
      args.gas,
      paramBytes.dataStart as u32,
      paramBytes.byteLength,
    );

    let message: string | null = null;
    let data: T | null = null;

    // 获取调用结果的大小
    const resultDataLength = ENV.GetCallResultSize();
    if (resultDataLength > ENV.StorageLimit) {
      code = 1;
      message = '[callContract] execute failed - GetCallResultSize';
    }

    // 获取调用结果的数据
    const resultData = utils.allocData(resultDataLength);
    const resultCode = ENV.GetCallResult(resultData.ptr, utils.allocLength(resultDataLength));
    if (resultCode !== 0) {
      code = 1;
      message = '[callContract] execute failed - GetCallResult';
    }

    if (code === 0) {
      data = utils.unserialize<T>(resultData.bytes);
    } else {
      message = message || utils.unserialize<string>(resultData.bytes);
    }

    // 获取新的合约数据，因为在调用其它合约之后，数据可能发生变化
    this.loadData();

    return { code, message, data };
  }
}
