import { Identity, Var } from '../..';
import { BaseContract, CallContractArgs } from '.';

class Contract extends BaseContract {}

const contract = new Contract();

const args: CallContractArgs = {
  id: Identity.fromStr('1234567890123456789012345678901234567890123456789012345678901234'),
  method: 'test',
  value: 666,
  gas: 888,
  params: [Var(666), Var([666, 888]), Var('myfish'), Var(['hello', 'myfish'])],
};

describe('base-contract', () => {
  test('callContract success', () => {
    const res = contract.callContract<string[]>(args);
    expect(res).toStrictEqual({
      code: 0,
      message: null,
      data: ['hello', 'myfish'],
    });
  });

  test('callContract fail - CallContract', () => {
    const res = contract.callContract<string[]>(args);
    expect(res).toStrictEqual({
      code: 1,
      message: 'error-result',
      data: null,
    });
  });

  test('callContract fail - GetCallResultSize', () => {
    const res = contract.callContract<string[]>(args);
    expect(res).toStrictEqual({
      code: 1,
      message: '[callContract] execute failed - GetCallResultSize',
      data: null,
    });
  });

  // 本地该用例没有被执行，CI 上又会报错
  // TODO 看看具体失败原因
  // test('callContract fail - GetCallResult', () => {
  //   const res = contract.callContract<string[]>(args);
  //   expect(res).toStrictEqual({
  //     code: 1,
  //     message: '[callContract] execute failed - GetCallResult',
  //     data: null,
  //   });
  // });
});
