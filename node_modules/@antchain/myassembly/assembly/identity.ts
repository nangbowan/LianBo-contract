import { ENV, utils, assert } from '.';

/**
 * 账户地址（长度为 32 的字符串）
 * 在合约中，账户地址可能会以字符串或字节码的方式出现
 * 用这个类，可以抹平差异，并提供一些便捷操作
 * 参考：mycdt/blob/master/libraries/mychainlib/identity.hpp
 */
export class Identity {
  str: string;
  bytes: Uint8Array;
  ptr: u32;
  length: u32;

  /**
   * TODO:
   *
   * 为什么不使用 string | Uint8Array
   *  - AS 不支持 Union Types
   *    https://www.assemblyscript.org/status.html#union-types
   *
   * 为什么不使用 generic
   *  - 操作符重载不能使用泛型
   *    https://github.com/AssemblyScript/assemblyscript/issues/1933
   */
  constructor(str: string) {
    // 每个字节转成 2 个十六进制字符串
    const strLength = ENV.IdentityLength * 2;
    assert(str.length === strLength, `Identity must be string of length ${strLength}`);

    this.str = str;
    this.bytes = utils.getBytes(str);
    this.ptr = this.bytes.dataStart as u32;
    this.length = this.bytes.byteLength as u32;
  }

  // 用 string 创建
  static fromStr(str: string): Identity {
    return new Identity(str);
  }

  // 用 bytes 创建
  static fromBytes(bytes: Uint8Array): Identity {
    const str = utils.bytesToHexString(bytes);
    return new Identity(str);
  }

  @operator('==')
  protected eq(right: Identity | null): bool {
    if (right === this) return true;
    if (right === null) return false;
    return this.str == right.str;
  }

  @operator('!=')
  protected ne(right: Identity | null): bool {
    return !this.eq(right);
  }

  public toString(): string {
    return this.str;
  }
}
