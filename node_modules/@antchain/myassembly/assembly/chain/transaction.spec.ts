import {
  isLocalTx,
  getTxHash,
  getData,
  transferBalance,
  getRelatedTxListSize,
  getRelatedTxList,
  getTxSender,
  getTxReceiver,
  getTxTimestamp,
  getTxData,
  getTxBlockIndex,
  getTxDepositFlag,
  getConfidentialDepositData,
  getConfidentialDepositFlag,
} from './transaction';
import { Identity } from '..';

const idHash = '1234567890123456789012345678901234567890123456789012345678906666';
const txHash = '1234567890123456789012345678901234567890123456789012345678908888';

describe('chain/transaction', () => {
  test('isLocalTx', () => {
    expect(isLocalTx()).toBe(true);
  });

  test('getTxHash', () => {
    expect(getTxHash()).toBe(txHash);
  });

  test('getData', () => {
    expect(getData()).toBe('transaction-data');
  });

  test('transferBalance', () => {
    expect(() => {
      transferBalance(Identity.fromStr(idHash), 1000);
    }).toThrow();
  });

  test('getRelatedTxListSize', () => {
    const id = Identity.fromStr(idHash);
    expect(getRelatedTxListSize(id, 123)).toBe(666);
  });

  test('getRelatedTxList', () => {
    const id = Identity.fromStr(idHash);
    expect(getRelatedTxList(id, 123, 0, 10)).toStrictEqual(['hello', 'myfish']);
  });

  test('getTxSender', () => {
    expect(getTxSender(txHash).str).toBe(idHash);
  });

  test('getTxReceiver', () => {
    expect(getTxReceiver(txHash).str).toBe(idHash);
  });

  test('getTxData', () => {
    expect(getTxData(txHash)).toBe('tx-data');
  });

  test('getTxTimestamp', () => {
    expect(getTxTimestamp(txHash)).toBe(666);
  });

  test('getTxBlockIndex', () => {
    expect(getTxBlockIndex(txHash)).toStrictEqual({
      blockNumber: 666,
      txIndex: 888,
    });
  });

  test('getTxDepositFlag', () => {
    expect(getTxDepositFlag(txHash)).toBe(666);
  });

  test('getConfidentialDepositData', () => {
    expect(getConfidentialDepositData(txHash)).toBe('tx-data');
  });

  test('getConfidentialDepositFlag', () => {
    expect(getConfidentialDepositFlag(txHash)).toBe(666);
  });
});
