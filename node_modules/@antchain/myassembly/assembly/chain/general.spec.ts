import { log, abort, assert, readBuffer, digest, getTargetAddress } from './general';
import { ENV, utils } from '..';

describe('chain/general', () => {
  test('log', () => {
    expect(() => {
      log(666, ['topic-1', 'topic-2']);
    }).toThrow();
    expect(() => {
      log([666, 888], ['topic-1', 'topic-2']);
    }).toThrow();
    expect(() => {
      log('data', ['topic-1', 'topic-2']);
    }).toThrow();
    expect(() => {
      log(['data-1', 'data-2'], ['topic-1', 'topic-2']);
    }).toThrow();
  });

  test('abort', () => {
    expect(() => {
      abort('error-message');
    }).toThrow();
  });

  test('assert', () => {
    expect(() => {
      assert(false, 'error-message');
    }).toThrow();
  });

  test('readBuffer', () => {
    const bytes = utils.getBytes('buffer-data');
    expect(readBuffer(bytes.length, 'error-message')).toStrictEqual(bytes);
  });

  test('digest', () => {
    expect(digest('source-msg', ENV.DigestType.SHA256)).toBe(
      '1234567890123456789012345678901234567890123456789012345678901234',
    );
  });

  test('getTargetAddress', () => {
    expect(getTargetAddress('target-name').str).toBe(
      '1234567890123456789012345678901234567890123456789012345678901234',
    );
  });
});
