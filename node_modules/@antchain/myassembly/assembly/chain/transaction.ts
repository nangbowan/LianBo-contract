import { readBuffer } from './general';
import { ENV, Identity, SerializeHelper, utils, assert } from '..';

/**
 * 当前触发交易的执行环境是否 local
 * @returns bool
 */
export function isLocalTx(): bool {
  return bool(ENV.IsLocalTx());
}

/**
 * 获取当前触发交易的 hash
 * @returns string
 */
export function getTxHash(): string {
  const data = utils.allocData(ENV.HashLength);
  const res = ENV.GetTxHash(data.ptr, data.lengthPtr);
  assert(res === 0, '[getTxHash] failed');
  return utils.bytesToHexString(data.bytes);
}

/**
 * 获取当前触发交易的 data 字段值
 * @returns string
 */
export function getData(): string {
  const length = ENV.GetDataSize();
  const data = utils.allocData(length);
  const res = ENV.GetData(data.ptr, data.lengthPtr);
  assert(res === 0, '[getData] failed');
  return String.UTF8.decode(utils.bytesToBuffer(data.bytes));
}

/**
 * 向 id 指定账户转移资产
 * @param id Identity
 * @param balance u64
 */
export function transferBalance(id: Identity, balance: u64): void {
  const res = ENV.TransferBalance(id.ptr, id.length, balance);
  assert(res === 0, '[transferBalance] execute failed');
}

/**
 * 查询 id 指定账户、指定 flag 的关联存证交易数量
 * @param id Identity 交易的 to 账户
 * @param flag u64 交易的 flag
 * @returns u64 数量
 */
export function getRelatedTxListSize(id: Identity, flag: u64): u64 {
  const lengthPtr = new Uint64Array(1).dataStart as u32;
  const res = ENV.GetRelatedTransactionListSize(id.ptr, id.length, flag, lengthPtr);
  assert(res === 0, '[getRelatedTxListSize] execute failed');
  return load<u64>(lengthPtr);
}

/**
 * 查询 id 指定账户、指定 flag 的关联存证交易列表
 * @param id Identity 交易的 to 账户
 * @param flag u64 交易的 flag
 * @param start u64 开始索引
 * @param size u32 查询个数
 * @returns string[] 交易列表
 */
export function getRelatedTxList(id: Identity, flag: u64, start: u64, size: u32): string[] {
  // 获取列表，数据会被缓存
  const lengthPtr = utils.allocLength();
  const res = ENV.GetRelatedTransactionList(id.ptr, id.length, flag, start, size, lengthPtr);
  assert(res === 0, '[getRelatedTxList] query failed - GetRelatedTransactionList');

  // 从缓存中读取数据
  const length = load<u32>(lengthPtr);
  const bytes = readBuffer(length, '[getRelatedTxList] execute failed - readBuffer');

  // 反序列化
  return utils.unserialize<string[]>(bytes);
}

// 交易字段枚举
enum TxFields {
  FROM = 1,
  TO = 2,
  TIMESTAMP = 3,
  DATA = 4,
  BLOCK_NUMBER_INDEX = 5,
  DEPOSIT_FLAG = 6,
}

/**
 * 获取指定交易的某个字段的数据
 * @param txHash 交易哈希
 * @param field 字段枚举
 * @param confidential 是否机密存证
 * @returns bytes
 */
function getTxField(txHash: string, field: TxFields, confidential: bool = false): Uint8Array {
  const hashBytes = utils.getBytes(txHash);
  const lengthPtr = utils.allocLength();

  // 获取字段，数据会被缓存
  if (confidential) {
    assert(
      ENV.GetConfidentialDeposit(
        field,
        hashBytes.dataStart as u32,
        hashBytes.byteLength as u32,
        lengthPtr,
      ) === 0,
      `[getTxField] field: ${field} get failed - GetConfidentialDeposit`,
    );
  } else {
    assert(
      ENV.GetTransaction(
        field,
        hashBytes.dataStart as u32,
        hashBytes.byteLength as u32,
        lengthPtr,
      ) === 0,
      `[getTxField] field: ${field} get failed - GetTransaction`,
    );
  }

  // 从缓存中读取数据
  const length = load<u32>(lengthPtr);
  return readBuffer(length, `[getTxField] field: ${field} execute failed - readBuffer`);
}

/**
 * 获取指定交易的发送者
 * @param txHash 交易哈希
 * @returns Identity
 */
export function getTxSender(txHash: string): Identity {
  return Identity.fromBytes(getTxField(txHash, TxFields.FROM));
}

/**
 * 获取指定交易的接收者
 * @param txHash 交易哈希
 * @returns Identity
 */
export function getTxReceiver(txHash: string): Identity {
  return Identity.fromBytes(getTxField(txHash, TxFields.TO));
}

/**
 * 获取指定交易的存证数据
 * @param txHash 交易哈希
 * @returns string
 */
export function getTxData(txHash: string): string {
  return utils.unserialize<string>(getTxField(txHash, TxFields.DATA));
}

/**
 * 获取指定交易的上链时间
 * @param txHash 交易哈希
 * @returns u64
 */
export function getTxTimestamp(txHash: string): u64 {
  return utils.unserialize<u64>(getTxField(txHash, TxFields.TIMESTAMP));
}

/**
 * 获取指定交易的所在区块、在区块中的顺序
 * @param txHash 交易哈希
 * @returns
 *  - blockNumber 所在区块的编号
 *  - txIndex 在区块中的顺序
 */
export function getTxBlockIndex(txHash: string): TxBlockIndex {
  const bytes = getTxField(txHash, TxFields.BLOCK_NUMBER_INDEX);
  const helper = new SerializeHelper(bytes);
  return {
    blockNumber: helper.read<u64>(),
    txIndex: helper.read<u32>(),
  };
}

@unmanaged
class TxBlockIndex {
  blockNumber: u64;
  txIndex: u32;
}

/**
 * 获取指定交易的关联性标识
 * @param txHash 交易哈希
 * @returns u64
 */
export function getTxDepositFlag(txHash: string): u64 {
  return utils.unserialize<u64>(getTxField(txHash, TxFields.DEPOSIT_FLAG));
}

/**
 * 获取指定交易的机密存证的数据
 * @param txHash 交易哈希
 * @returns string
 */
export function getConfidentialDepositData(txHash: string): string {
  return utils.unserialize<string>(getTxField(txHash, TxFields.DATA, true));
}

/**
 * 获取指定交易的机密存证的关联性标识
 * @param txHash 交易哈希
 * @returns u64
 */
export function getConfidentialDepositFlag(txHash: string): u64 {
  return utils.unserialize<u64>(getTxField(txHash, TxFields.DEPOSIT_FLAG, true));
}
