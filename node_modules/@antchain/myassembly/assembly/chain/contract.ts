import { ENV, Identity, utils, assert } from '..';

/**
 * 获取当前合约剩余可用的 gas 数量
 * @returns u64
 */
export function getGas(): u64 {
  return ENV.GetGas();
}

/**
 * 获取本次调用接收的资产数量
 *  - 如果是交易调用，就是在交易中指定的 value 值
 *  - 如果是合约调用，就是在 CallContract 方法中指定的 value 值
 * @returns u64
 */
export function getValue(): u64 {
  return ENV.GetValue();
}

/**
 * 获取 id 指定合约的代码
 * @param id Identity
 * @returns string
 */
export function getCode(id: Identity): string {
  const data = utils.allocData(ENV.StorageLimit);
  const res = ENV.GetCode(id.ptr, id.length, data.ptr, data.lengthPtr);
  const actualDataLength = load<u32>(data.lengthPtr);
  assert(res === 0, `[getCode] failed, id: ${id.str}`);
  assert(actualDataLength <= ENV.StorageLimit, `[getCode] length overflow, id: ${id.str}`);
  return String.UTF8.decode(utils.bytesToBuffer(data.bytes.subarray(0, actualDataLength)));
}

/**
 * 获取 id 指定合约的代码 hash
 * @param id Identity
 * @returns string
 */
export function getCodeHash(id: Identity): string {
  const data = utils.allocData(ENV.HashLength);
  const res = ENV.GetCodeHash(id.ptr, id.length, data.ptr, data.lengthPtr);
  assert(res === 0, `[getCodeHash] failed, id: ${id.str}`);
  return utils.bytesToHexString(data.bytes);
}

/**
 * 根据合约模板创建新合约
 * @param from 合约模板 id
 * @param to 新合约 id
 */
export function createContract(from: Identity, to: Identity): void {
  const res = ENV.CreateContract(from.ptr, from.length, to.ptr, to.length);
  assert(res === 0, `[createContract] execute failed`);
}
