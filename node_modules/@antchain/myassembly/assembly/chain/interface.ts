import { ENV, utils } from '..';

/**
 * 获取调用合约的接口名称
 * @returns string
 */
export function getInterfaceName(): string {
  const length = ENV.ReadInterfaceNameSize();
  const data = utils.allocData(length);
  ENV.ReadInterfaceName(data.ptr, data.lengthPtr);
  return String.UTF8.decode(utils.bytesToBuffer(data.bytes));
}

/**
 * 获取调用合约的接口参数
 * @returns 字节码
 */
export function getInterfaceParamBytes(): Uint8Array {
  const length = ENV.ReadInterfaceParamsSize();
  const data = utils.allocData(length);
  ENV.ReadInterfaceParams(data.ptr, data.lengthPtr);
  return data.bytes;
}

/**
 * 设置合约方法执行之后返回给调用方的值
 * @param value 可以被序列化的值
 */
export function setReturnValue<T>(value: T): void {
  const bytes = utils.serialize(value);
  const res = ENV.SetReturnValue(bytes.dataStart as u32, bytes.byteLength);
  assert(res === 0, '[setReturnValue] execute failed');
}
