import { setStorage, getStorage, deleteStorage, getStorageSize } from './storage';

describe('chain/storage', () => {
  test('setStorage', () => {
    expect(() => {
      setStorage('key', 'hello-myfish');
    }).not.toThrow();
  });

  test('getStorageSize', () => {
    expect(getStorageSize('key')).toBe(255);
  });

  test('getStorage<string>', () => {
    expect(getStorage<string>('key')).toBe('hello-myfish');
  });

  test('getStorage<u32>', () => {
    expect(getStorage<u32>('key')).toBe(666);
  });

  test('getStorage<bool>', () => {
    expect(getStorage<bool>('key')).toBe(true);
  });

  test('getStorage<string[]>', () => {
    expect(getStorage<string[]>('key')).toStrictEqual(['hello', 'myfish']);
  });

  test('getStorage<Map<string, u32>>', () => {
    const map = new Map<string, u32>();
    map.set('hello', 666);
    map.set('myfish', 888);
    expect(getStorage<Map<string, u32>>('key')).toStrictEqual(map);
  });

  test('deleteStorage', () => {
    expect(() => {
      deleteStorage('key');
    }).not.toThrow();
  });
});
