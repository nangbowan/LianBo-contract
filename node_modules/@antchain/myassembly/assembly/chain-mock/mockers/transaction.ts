import { Mocker } from '../mocker';
import { Identity } from '../..';

type F_IsLocalTx = () => bool;
type R_IsLocalTx = returnof<F_IsLocalTx>;
class IsLocalTxMocker extends Mocker<F_IsLocalTx, R_IsLocalTx> {}
export const isLocalTx: IsLocalTxMocker = new IsLocalTxMocker(false);

type F_GetTxHash = () => string;
type R_GetTxHash = returnof<F_GetTxHash>;
class GetTxHashMocker extends Mocker<F_GetTxHash, R_GetTxHash> {}
export const getTxHash: GetTxHashMocker = new GetTxHashMocker(
  '1234567890123456789012345678901234567890123456789012345678901234',
);

type F_GetData = () => string;
type R_GetData = returnof<F_GetData>;
class GetDataMocker extends Mocker<F_GetData, R_GetData> {}
export const getData: GetDataMocker = new GetDataMocker('myfish');

type F_GetRelatedTxListSize = (id: Identity, flag: u64) => u64;
type R_GetRelatedTxListSize = returnof<F_GetRelatedTxListSize>;
class GetRelatedTxListSizeMocker extends Mocker<F_GetRelatedTxListSize, R_GetRelatedTxListSize> {}
export const getRelatedTxListSize: GetRelatedTxListSizeMocker = new GetRelatedTxListSizeMocker(3);

type F_GetRelatedTxList = (id: Identity, flag: u64, start: u64, size: u32) => string[];
type R_GetRelatedTxList = returnof<F_GetRelatedTxList>;
class GetRelatedTxListMocker extends Mocker<F_GetRelatedTxList, R_GetRelatedTxList> {}
export const getRelatedTxList: GetRelatedTxListMocker = new GetRelatedTxListMocker([
  '1234567890123456789012345678901234567890123456789012345678901111',
  '1234567890123456789012345678901234567890123456789012345678902222',
  '1234567890123456789012345678901234567890123456789012345678903333',
]);

type F_GetTxSender = (txHash: string) => Identity;
type R_GetTxSender = returnof<F_GetTxSender>;
class GetTxSenderMocker extends Mocker<F_GetTxSender, R_GetTxSender> {}
export const getTxSender: GetTxSenderMocker = new GetTxSenderMocker(
  Identity.fromStr('1234567890123456789012345678901234567890123456789012345678901234'),
);

type F_GetTxReceiver = (txHash: string) => Identity;
type R_GetTxReceiver = returnof<F_GetTxReceiver>;
class GetTxReceiverMocker extends Mocker<F_GetTxReceiver, R_GetTxReceiver> {}
export const getTxReceiver: GetTxReceiverMocker = new GetTxReceiverMocker(
  Identity.fromStr('1234567890123456789012345678901234567890123456789012345678901234'),
);

type F_GetTxData = (txHash: string) => string;
type R_GetTxData = returnof<F_GetTxData>;
class GetTxDataMocker extends Mocker<F_GetTxData, R_GetTxData> {}
export const getTxData: GetTxDataMocker = new GetTxDataMocker('myfish');

type F_GetTxTimestamp = (txHash: string) => u64;
type R_GetTxTimestamp = returnof<F_GetTxTimestamp>;
class GetTxTimestampMocker extends Mocker<F_GetTxTimestamp, R_GetTxTimestamp> {}
export const getTxTimestamp: GetTxTimestampMocker = new GetTxTimestampMocker(1594224000000);

@unmanaged
class TxBlockIndex {
  blockNumber: u64;
  txIndex: u32;
}
type F_GetTxBlockIndex = (txHash: string) => TxBlockIndex;
type R_GetTxBlockIndex = returnof<F_GetTxBlockIndex>;
class GetTxBlockIndexMocker extends Mocker<F_GetTxBlockIndex, R_GetTxBlockIndex> {}
export const getTxBlockIndex: GetTxBlockIndexMocker = new GetTxBlockIndexMocker({
  blockNumber: 888,
  txIndex: 100,
});

type F_GetTxDepositFlag = (txHash: string) => u64;
type R_GetTxDepositFlag = returnof<F_GetTxDepositFlag>;
class GetTxDepositFlagMocker extends Mocker<F_GetTxDepositFlag, R_GetTxDepositFlag> {}
export const getTxDepositFlag: GetTxDepositFlagMocker = new GetTxDepositFlagMocker(1);

type F_GetConfidentialDepositData = (txHash: string) => string;
type R_GetConfidentialDepositData = returnof<F_GetConfidentialDepositData>;
class GetConfidentialDepositDataMocker extends Mocker<
  F_GetConfidentialDepositData,
  R_GetConfidentialDepositData
> {}
export const getConfidentialDepositData: GetConfidentialDepositDataMocker =
  new GetConfidentialDepositDataMocker('myfish');

type F_GetConfidentialDepositFlag = (txHash: string) => u64;
type R_GetConfidentialDepositFlag = returnof<F_GetConfidentialDepositFlag>;
class GetConfidentialDepositFlagMocker extends Mocker<
  F_GetConfidentialDepositFlag,
  R_GetConfidentialDepositFlag
> {}
export const getConfidentialDepositFlag: GetConfidentialDepositFlagMocker =
  new GetConfidentialDepositFlagMocker(1);
