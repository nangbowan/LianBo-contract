import { Mocker } from '../mocker';
import { Identity } from '../..';

type F_GetOrigin = () => Identity;
type R_GetOrigin = returnof<F_GetOrigin>;
class GetOriginMocker extends Mocker<F_GetOrigin, R_GetOrigin> {}
export const getOrigin: GetOriginMocker = new GetOriginMocker(
  Identity.fromStr('1234567890123456789012345678901234567890123456789012345678901234'),
);

type F_GetSender = () => Identity;
type R_GetSender = returnof<F_GetSender>;
class GetSenderMocker extends Mocker<F_GetSender, R_GetSender> {}
export const getSender: GetSenderMocker = new GetSenderMocker(
  Identity.fromStr('1234567890123456789012345678901234567890123456789012345678901234'),
);

type F_GetSelf = () => Identity;
type R_GetSelf = returnof<F_GetSelf>;
class GetSelfMocker extends Mocker<F_GetSelf, R_GetSelf> {}
export const getSelf: GetSelfMocker = new GetSelfMocker(
  Identity.fromStr('1234567890123456789012345678901234567890123456789012345678901234'),
);

type F_CheckAccount = (id: Identity) => bool;
type R_CheckAccount = returnof<F_CheckAccount>;
class CheckAccountMocker extends Mocker<F_CheckAccount, R_CheckAccount> {}
export const checkAccount: CheckAccountMocker = new CheckAccountMocker(true);

enum AccountStatus {
  NORMAL = 0,
  FREEZE = 1,
  RECOVERING = 2,
  NOT_EXIST = 1000,
}
type F_GetAccountStatus = (id: Identity) => AccountStatus;
type R_GetAccountStatus = returnof<F_GetAccountStatus>;
class GetAccountStatusMocker extends Mocker<F_GetAccountStatus, R_GetAccountStatus> {}
export const getAccountStatus: GetAccountStatusMocker = new GetAccountStatusMocker(
  AccountStatus.NORMAL,
);

type F_GetBalance = (id: Identity) => u64;
type R_GetBalance = returnof<F_GetBalance>;
class GetBalanceMocker extends Mocker<F_GetBalance, R_GetBalance> {}
export const getBalance: GetBalanceMocker = new GetBalanceMocker(0);

type F_GetRecoverKey = (id: Identity) => string;
type R_GetRecoverKey = returnof<F_GetRecoverKey>;
class GetRecoverKeyMocker extends Mocker<F_GetRecoverKey, R_GetRecoverKey> {}
export const getRecoverKey: GetRecoverKeyMocker = new GetRecoverKeyMocker(
  '1234567890123456789012345678901234567890123456789012345678901234',
);

type F_GetAuthMap = (id: Identity) => Map<Identity, u32>;
type R_GetAuthMap = returnof<F_GetAuthMap>;
class GetAuthMapMocker extends Mocker<F_GetAuthMap, R_GetAuthMap> {}
const defaultAuthMap = new Map<Identity, u32>();
defaultAuthMap.set(
  Identity.fromStr('1234567890123456789012345678901234567890123456789012345678901234'),
  100,
);
export const getAuthMap: GetAuthMapMocker = new GetAuthMapMocker(defaultAuthMap);
