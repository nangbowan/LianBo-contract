import { Timestamp } from "../../../types/web3";
import { RpcRequestParams } from "../../../types/rpc";
import { Contract } from "../../contract";
import { BaseProvider, QueryAccountParams, QueryAccountResponse, CreateAccountResponse, UpdateAuthMapResponse, QueryBlockParams, QueryBlockResponse, QueryBlockHeaderParams, QueryBlockHeaderResponse, QueryTransactionParams, QueryTransactionResponse, DeployContractParams, DeployContractResponse, ProviderCallContractParams, CallContractResponse, QueryTransactionReceiptParams, QueryTransactionReceiptResponse, QueryContractParams, QueryContractResponse, QueryLastBlockResponse, QueryBlockBodyInfosReponse, QueryBlockBodyInfosParams, QueryBlockReceiptInfosResponse, QueryBlockReceiptInfosParams, QueryBlockHeaderInfosResponse, QueryBlockHeaderInfosParams, QueryReceiptProofResponse, QueryReceiptProofParams, QueryTransactionProofResponse, QueryTransactionProofParams, QueryStateProofResponse, QueryStateProofParams, QueryBlockHeaderProofResponse, QueryBlockHeaderProofParams, QueryBlockProofResponse, QueryBlockProofParams, UpdateBlackListResponse, UpdateBlackListParams, QueryLogLevelResponse, QueryLogLevelParams, QueryContractConfigStatusResponse, QueryContractConfigStatusParams, QueryContractNodesStatusResponse, QueryContractNodesStatusParams, QueryBlockCacheStatusResponse, QueryBlockCacheStatusParams, QueryTransactionCacheStatus, QuerySyncStatusResponse, QuerySyncStatusParams, QueryCommonConsensusStatusResponse, QueryCommonConsensusStatusParams, QueryConsensusStatusResponse, QueryConsensusStatusParams, QueryP2PStatusResponse, QueryTimestampResponse, QueryTimestampParams, QueryTransactionAndReceiptResponse, QueryTransactionAndReceiptParams, QueryTransactionListResponse, QueryTransactionListParams, QueryLastBlockHeaderResponse, NativeDepositDataResponse, NativeDepositDataParams, FreezeContractResponse, FreezeContractParams, FreezeAccountResponse, FreezeAccountParams, ResetPubKeyResponse, ResetPubKeyParams, PreResetPubKeyResponse, PreResetPubKeyParams, SetRecoverkeyResponse, SetRecoverkeyParams, TransferBalanceResponse, TransferBalanceParams, QueryP2PStatusParams, WatchContractEventParams, WatchContractEventCallback, SignParams, SignResponse } from '../base-provider';
interface ProviderOptions {
    chainId: string;
}
interface ProviderAccount {
    did: string;
    timestamp: Timestamp;
    signature: string;
}
interface AlipayMiniRpcHandler {
    id?: string;
    promise?: Promise<any>;
    resolve?: (value?: any) => void;
    reject?: (error?: any) => void;
}
export declare class AlipayMiniProvider extends BaseProvider {
    majorVersion: number;
    chainId: string;
    accounts: ProviderAccount[];
    rpcHandler: AlipayMiniRpcHandler;
    constructor({ chainId }: ProviderOptions);
    request<T = any>({ method, params }: RpcRequestParams): Promise<T>;
    requestAccounts(): Promise<ProviderAccount[]>;
    createAccount(): Promise<CreateAccountResponse>;
    watchContractEvent(contract: Contract, params: WatchContractEventParams, callback: WatchContractEventCallback): void;
    transferBalance(params: TransferBalanceParams): Promise<TransferBalanceResponse>;
    setRecoverkey(params: SetRecoverkeyParams): Promise<SetRecoverkeyResponse>;
    preResetPubKey(params: PreResetPubKeyParams): Promise<PreResetPubKeyResponse>;
    resetPubKey(params: ResetPubKeyParams): Promise<ResetPubKeyResponse>;
    freezeAccount(params: FreezeAccountParams): Promise<FreezeAccountResponse>;
    freezeContract(params: FreezeContractParams): Promise<FreezeContractResponse>;
    nativeDepositData(params: NativeDepositDataParams): Promise<NativeDepositDataResponse>;
    queryLastBlockHeader(): Promise<QueryLastBlockHeaderResponse>;
    queryTransactionList(params: QueryTransactionListParams): Promise<QueryTransactionListResponse>;
    queryTransactionAndReceipt(params: QueryTransactionAndReceiptParams): Promise<QueryTransactionAndReceiptResponse>;
    queryTimestamp(params: QueryTimestampParams): Promise<QueryTimestampResponse>;
    queryP2PStatus(params: QueryP2PStatusParams): Promise<QueryP2PStatusResponse>;
    queryConsensusStatus(params: QueryConsensusStatusParams): Promise<QueryConsensusStatusResponse>;
    queryCommonConsensusStatus(params: QueryCommonConsensusStatusParams): Promise<QueryCommonConsensusStatusResponse>;
    querySyncStatus(params: QuerySyncStatusParams): Promise<QuerySyncStatusResponse>;
    queryTransactionCacheStatus(params: QueryTransactionCacheStatus): Promise<QueryTransactionCacheStatus>;
    queryBlockCacheStatus(params: QueryBlockCacheStatusParams): Promise<QueryBlockCacheStatusResponse>;
    queryContractNodesStatus(params: QueryContractNodesStatusParams): Promise<QueryContractNodesStatusResponse>;
    queryContractConfigStatus(params: QueryContractConfigStatusParams): Promise<QueryContractConfigStatusResponse>;
    queryLogLevel(params: QueryLogLevelParams): Promise<QueryLogLevelResponse>;
    updateBlackList(params: UpdateBlackListParams): Promise<UpdateBlackListResponse>;
    queryBlockProof(params: QueryBlockProofParams): Promise<QueryBlockProofResponse>;
    queryBlockHeaderProof(params: QueryBlockHeaderProofParams): Promise<QueryBlockHeaderProofResponse>;
    queryStateProof(params: QueryStateProofParams): Promise<QueryStateProofResponse>;
    queryTransactionProof(params: QueryTransactionProofParams): Promise<QueryTransactionProofResponse>;
    queryReceiptProof(params: QueryReceiptProofParams): Promise<QueryReceiptProofResponse>;
    queryBlockHeaderInfos(params: QueryBlockHeaderInfosParams): Promise<QueryBlockHeaderInfosResponse>;
    queryBlockReceiptInfos(params: QueryBlockReceiptInfosParams): Promise<QueryBlockReceiptInfosResponse>;
    queryBlockBodyInfos(params: QueryBlockBodyInfosParams): Promise<QueryBlockBodyInfosReponse>;
    updateAuthMap(): Promise<UpdateAuthMapResponse>;
    queryAccount(params: QueryAccountParams): Promise<QueryAccountResponse>;
    queryBlockHeader(params: QueryBlockHeaderParams): Promise<QueryBlockHeaderResponse>;
    queryBlock(params: QueryBlockParams): Promise<QueryBlockResponse>;
    queryLastBlock(): Promise<QueryLastBlockResponse>;
    queryTransaction(params: QueryTransactionParams): Promise<QueryTransactionResponse>;
    queryTransactionReceipt(params: QueryTransactionReceiptParams): Promise<QueryTransactionReceiptResponse>;
    deployContract(contract: Contract, params: DeployContractParams): Promise<DeployContractResponse>;
    updateContract(): Promise<DeployContractResponse>;
    callContract<T = any>(contract: Contract, { methodName, args, gas, blockNumber, local }: ProviderCallContractParams): Promise<CallContractResponse<T>>;
    queryContract(params?: QueryContractParams): Promise<QueryContractResponse>;
    sign(params: SignParams): Promise<SignResponse>;
}
export {};
