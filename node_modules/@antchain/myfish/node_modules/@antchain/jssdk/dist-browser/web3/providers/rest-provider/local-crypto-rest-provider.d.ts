import { TEEPublicKey, TEEPassword } from "../../../types/web3";
import { CloudCryptoRestProvider, BaseRestProviderConfig } from './cloud-crypto-rest-provider';
import { DeployContractParams, DeployContractResponse, ProviderCallContractParams, CallContractResponse, CreateAccountResponse, SignParams, SignResponse } from '../base-provider';
import { Contract } from "../../contract";
export interface LocalCryptoRestProviderConfig extends BaseRestProviderConfig {
    account?: string;
    accountPrivateKey?: string;
    accountPrivateKeyPassword?: string;
    teePublicKey?: TEEPublicKey;
    teePassword?: TEEPassword;
}
export declare class LocalCryptoRestProvider extends CloudCryptoRestProvider {
    private localConfig;
    constructor(config: LocalCryptoRestProviderConfig);
    private getBaseData;
    sign(message: SignParams): Promise<SignResponse>;
    createAccount(): Promise<CreateAccountResponse>;
    deployContract(contract: Contract, params: DeployContractParams, update?: boolean): Promise<DeployContractResponse>;
    callContract<ReturnType = any>(contract: Contract, { methodName, args, gas, argsType, local, tee, timeout }: ProviderCallContractParams): Promise<CallContractResponse<ReturnType>>;
}
