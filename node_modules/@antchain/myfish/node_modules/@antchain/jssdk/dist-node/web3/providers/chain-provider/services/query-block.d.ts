import { TLSConnector } from '../tls-connector';
import { Hash, BlockNumber } from "../../../../types/web3";
export interface QueryLastBlockResponse {
    msg_type: number;
    sequence: number;
    return_code: number;
    group_id: string;
    block: {
        block_header: {
            hash: string;
            version: number;
            block_number: number;
            parent_hash: string;
            transaction_root: string;
            receipt_root: string;
            state_root: string;
            gas_used: number;
            timestamp: number;
            log_bloom: string;
        };
        block_body: {
            transaction_list: any[];
            receipt_list: any[];
            consensus_proof: string;
        };
    };
}
export declare function queryLastBlock(params: any, connector: TLSConnector): Promise<QueryLastBlockResponse>;
export interface QueryBlockHeaderPrarams {
    blockNumber?: BlockNumber;
    hash?: Hash;
}
export interface QueryBlockHeaderResult {
    msg_type: number;
    sequence: number;
    return_code: number;
    group_id: string;
    block_header: {
        hash: string;
        version: number;
        block_number: number;
        parent_hash: string;
        transaction_root: string;
        receipt_root: string;
        state_root: string;
        gas_used: number;
        timestamp: number;
        log_bloom: string;
    };
    api: 'QueryBlockHeader';
}
export declare function queryBlockHeader(params: QueryBlockHeaderPrarams, connector: TLSConnector): Promise<QueryBlockHeaderResult>;
export declare function queryLastBlockHeader(params: any, connector: TLSConnector): Promise<QueryBlockHeaderResult>;
export interface QueryBlockPrarams {
    blockNumber?: BlockNumber;
    hash?: Hash;
}
export interface QueryBlockResult {
    msg_type: number;
    sequence: number;
    return_code: number;
    group_id: string;
    block: {
        block_header: {
            hash: string;
            version: number;
            block_number: number;
            parent_hash: string;
            transaction_root: string;
            receipt_root: string;
            state_root: string;
            gas_used: number;
            timestamp: number;
            log_bloom: string;
        };
        block_body: {
            transaction_list: [];
            receipt_list: [];
            consensus_proof: '';
        };
    };
    api: 'QueryBlock';
}
export declare function queryBlock(params: QueryBlockPrarams, connector: TLSConnector): Promise<QueryBlockResult>;
