import { RestRequest } from "../../../../utils/rest-request";
import { BlockNumber, BizId, AccessId, RestMethods, Hash } from "../../../../types/web3";
export interface QueryBlockHeaderPrarams {
    bizid: BizId;
    accessId: AccessId;
    method: RestMethods.queryBlockHeader;
    requestStr: BlockNumber;
}
export interface QueryBlockHeaderResult {
    block: {
        blockHeader: {
            gasUsed: number;
            hash: string;
            logBloom: string;
            number: number;
            parentHash: string;
            receiptRoot: string;
            stateRoot: string;
            timestamp: number;
            transactionRoot: string;
            version: number;
        };
    };
}
export declare type QueryLastBlockResult = QueryBlockHeaderResult;
export interface QueryBlockPrarams {
    bizid: BizId;
    accessId: AccessId;
    method: RestMethods.queryBlock;
    requestStr: BlockNumber;
}
export interface QueryBlockResult {
    header: {
        number: number;
        transaction_root: string;
        gas_used: 0;
        version: 720575961887672834;
        receipt_root: string;
        hash: Hash;
        parent_hash: Hash;
        state_root: Hash;
        timestamp: 1638411445449;
        log_bloom: string;
    };
    body: {
        receipt_list: any[];
        consensus_proof: string;
        transaction_list: any[];
    };
}
export interface QueryLastBlockPrarams {
    bizid: BizId;
    accessId: AccessId;
    method: RestMethods.queryLastBlock;
}
export declare function queryBlockHeader(params: QueryBlockHeaderPrarams, request: RestRequest): Promise<QueryBlockHeaderResult>;
export declare function queryBlock(params: QueryBlockPrarams, request: RestRequest): Promise<QueryBlockResult>;
export declare function queryLastBlock(params: QueryLastBlockPrarams, request: RestRequest): Promise<QueryLastBlockResult>;
