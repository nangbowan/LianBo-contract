"use strict";var asn=require("asn1.js"),Buffer=require("safe-buffer").Buffer,lengths={prime256v1:Math.ceil(32),secp256k1:Math.ceil(32),secp384r1:Math.ceil(48),secp521r1:Math.ceil(521/8)},jwkCurves={prime256v1:"P-256",secp256k1:"P-256K",secp384r1:"P-384",secp521r1:"P-521"},curves={"P-256":"prime256v1","P-256K":"secp256k1","P-384":"secp384r1","P-521":"secp521r1"},ASN1ECRfc5915Key=asn.define("Rfc5915Key",function(){this.seq().obj(this.key("version").int(),this.key("privateKey").octstr(),this.key("parameters").optional().explicit(0).objid({"1 2 840 10045 3 1 7":"prime256v1","1 3 132 0 10":"secp256k1","1 3 132 0 34":"secp384r1","1 3 132 0 35":"secp521r1"}),this.key("publicKey").optional().explicit(1).bitstr())}),ASN1ECPkcs8Key=asn.define("Pkcs8Key",function(){this.seq().obj(this.key("version").int(),this.key("algorithmIdentifier").seq().obj(this.key("privateKeyType").objid({"1 2 840 10045 2 1":"EC"}),this.key("parameters").objid({"1 2 840 10045 3 1 7":"prime256v1","1 3 132 0 10":"secp256k1","1 3 132 0 34":"secp384r1","1 3 132 0 35":"secp521r1"})),this.key("privateKey").octstr())}),ASN1ECSpkiKey=asn.define("SpkiKey",function(){this.seq().obj(this.key("algorithmIdentifier").seq().obj(this.key("publicKeyType").objid({"1 2 840 10045 2 1":"EC"}),this.key("parameters").objid({"1 2 840 10045 3 1 7":"prime256v1","1 3 132 0 10":"secp256k1","1 3 132 0 34":"secp384r1","1 3 132 0 35":"secp521r1"})),this.key("publicKey").bitstr())});function parsePublicKeyBuffer(e,r){var t=lengths[e];if(4!=r[0])throw new TypeError("Compressed key unsupported");if(r.length!=2*t+1)throw new TypeError("Invalid uncompressed key size");return{c:e,x:r.slice(1,t+1),y:r.slice(t+1)}}function parsePkcs8(e){var r=ASN1ECPkcs8Key.decode(e,"der"),t=ASN1ECRfc5915Key.decode(r.privateKey,"der"),i=r.algorithmIdentifier.parameters,e=lengths[i],r=t.privateKey;if(r.length>e)throw new TypeError("Invalid private key size: expected "+e+" gotten "+r.length);t=parsePublicKeyBuffer(i,t.publicKey.data);return t.d=r,t}function parseRfc5915(e){var r=ASN1ECRfc5915Key.decode(e,"der"),t=lengths[r.parameters],e=r.privateKey;if(e.length>t)throw new TypeError("Invalid private key size: expected "+t+" gotten "+e.length);r=parsePublicKeyBuffer(r.parameters,r.publicKey.data);return r.d=e,r}function parseSpki(e){e=ASN1ECSpkiKey.decode(e,"der");return parsePublicKeyBuffer(e.algorithmIdentifier.parameters,e.publicKey.data)}var pemRfc5915RE=/-+BEGIN EC PRIVATE KEY-+([\s\S]+)-+END EC PRIVATE KEY-+/m,pemPkcs8RE=/-+BEGIN PRIVATE KEY-+([\s\S]*)-+END PRIVATE KEY-+/m,pemSpkiRE=/-+BEGIN PUBLIC KEY-+([\s\S]*)-+END PUBLIC KEY-+/m;function parsePem(e){if("string"!=typeof e)throw new TypeError("PEM must be a string");var r=null;if(r=e.match(pemRfc5915RE))return parseRfc5915(new Buffer(r[1].replace(/[\s-]/gm,""),"base64"));if(r=e.match(pemPkcs8RE))return parsePkcs8(new Buffer(r[1].replace(/[\s-]/gm,""),"base64"));if(r=e.match(pemSpkiRE))return parseSpki(new Buffer(r[1].replace(/[\s-]/gm,""),"base64"));throw new TypeError("Unrecognized PEM key structure")}function isObject(e){return!!e&&e.constructor===Object}function ECKey(e,r){if(!(this instanceof ECKey))return new ECKey(e,r);if(r=r||"pem",Buffer.isBuffer(e))if("pem"==r)var t,i=(t=parsePem(e.toString("ascii"))).c,n=t.x,s=t.y,f=t.d;else if("pkcs8"==r||"rfc5208"==r)i=(t=parsePkcs8(e)).c,n=t.x,s=t.y,f=t.d;else{if("spki"!=r&&"rfc5280"!=r)throw new TypeError('Unknown format for EC Key "'+r+'"');i=(t=parseSpki(e)).c,n=t.x,s=t.y,f=t.d}else if("string"==typeof e)if("pem"==r)i=(t=parsePem(e)).c,n=t.x,s=t.y,f=t.d;else if("pkcs8"==r||"rfc5208"==r)i=(t=parsePkcs8(new Buffer(e,"base64"))).c,n=t.x,s=t.y,f=t.d;else{if("spki"!=r&&"rfc5280"!=r)throw new TypeError('Unknown format for EC Key "'+r+'"');i=(t=parseSpki(new Buffer(e,"base64"))).c,n=t.x,s=t.y,f=t.d}else{if(!isObject(e))throw new TypeError("Unrecognized format for EC key");"string"==typeof e.curve?i=e.curve:"string"==typeof e.crv&&(i=curves[e.crv]||e.crv),Buffer.isBuffer(e.privateKey)?f=e.privateKey:"string"==typeof e.privateKey?f=new Buffer(e.privateKey,"base64"):Buffer.isBuffer(e.d)?f=e.d:"string"==typeof e.d&&(f=new Buffer(e.d,"base64")),Buffer.isBuffer(e.publicKey)?(t=parsePublicKeyBuffer(i,e.publicKey),n=t.x,s=t.y):"string"==typeof e.publicKey?(t=parsePublicKeyBuffer(i,new Buffer(e.publicKey,"base64")),n=t.x,s=t.y):(Buffer.isBuffer(e.x)?n=e.x:"string"==typeof e.x&&(n=new Buffer(e.x,"base64")),Buffer.isBuffer(e.y)?s=e.y:"string"==typeof e.y&&(s=new Buffer(e.y,"base64")))}if(!i)throw new TypeError("EC Key curve not specified");if(!n||!s)throw new TypeError("Public EC Key point unavailable");e=lengths[i];if(!e)throw new TypeError('EC Key curve "'+i+'" invalid');if(n.length!=e)throw new TypeError("Public EC Key point X of wrong length");if(s.length!=e)throw new TypeError("Public EC Key point Y of wrong length");if(f&&s.length!=e)throw new TypeError("Private EC Key of wrong length");Object.defineProperties(this,{curve:{enumerable:!0,configurable:!1,value:i},isPrivateECKey:{enumerable:!0,configurable:!1,value:null!=f},x:{enumerable:!0,configurable:!1,get:function(){return new Buffer(n)}},y:{enumerable:!0,configurable:!1,get:function(){return new Buffer(s)}},jsonCurve:{enumerable:!1,configurable:!1,value:jwkCurves[i]},publicCodePoint:{enumerable:!1,configurable:!1,get:function(){return Buffer.concat([new Buffer([4]),n,s])}}}),f&&Object.defineProperty(this,"d",{enumerable:!0,configurable:!1,get:function(){return new Buffer(f)}})}ECKey.prototype.asPublicECKey=function(){return this.isPrivateECKey?new ECKey({curve:this.curve,x:this.x,y:this.y}):this},ECKey.prototype.toBuffer=function(e){if("pem"==(e=e||"pem"))return new Buffer(this.toString("pem"),"ascii");if(this.isPrivateECKey){for(var r=this.d;0==r[0];)r=r.slice(1);if("pkcs8"==e||"rfc5208"==e)return ASN1ECPkcs8Key.encode({version:0,algorithmIdentifier:{privateKeyType:"EC",parameters:this.curve},privateKey:ASN1ECRfc5915Key.encode({version:1,privateKey:r,publicKey:{data:this.publicCodePoint}},"der")},"der");if("rfc5915"==e)return ASN1ECRfc5915Key.encode({version:1,privateKey:r,parameters:this.curve,publicKey:{data:this.publicCodePoint}},"der");throw new TypeError('Unknown format for private key "'+e+'"')}if("spki"==e||"rfc5280"==e)return ASN1ECSpkiKey.encode({algorithmIdentifier:{publicKeyType:"EC",parameters:this.curve},publicKey:{data:this.publicCodePoint}},"der");throw new TypeError('Unknown format for public key "'+e+'"')},ECKey.prototype.toString=function(e){if(e=e||"pem",this.isPrivateECKey){if("pem"==e)return"-----BEGIN PRIVATE KEY-----\n"+this.toBuffer("pkcs8").toString("base64").match(/.{1,64}/g).join("\n")+"\n-----END PRIVATE KEY-----\n";if("rfc5915"==e)return"-----BEGIN EC PRIVATE KEY-----\n"+this.toBuffer("rfc5915").toString("base64").match(/.{1,64}/g).join("\n")+"\n-----END EC PRIVATE KEY-----\n";if("pkcs8"==e||"rfc5208"==e)return this.toBuffer("pkcs8").toString("base64");if("spki"==e||"rfc5280"==e)return this.toBuffer("spki").toString("base64");throw new TypeError('Unknown format for private key "'+e+'"')}if("pem"==e)return"-----BEGIN PUBLIC KEY-----\n"+this.toBuffer("spki").toString("base64").match(/.{1,64}/g).join("\n")+"\n-----END PUBLIC KEY-----\n";if("spki"==e||"rfc5280"==e)return this.toBuffer("spki").toString("base64");throw new TypeError('Unknown format for public key "'+e+'"')},ECKey.prototype.toJSON=function(){function e(e){return e.toString("base64").replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")}var r,t={kty:"EC",crv:jwkCurves[this.curve],x:e(this.x),y:e(this.y)},i=this.d;return i&&(r=lengths[this.curve],i.length<r&&(r=r-i.length,i=Buffer.concat([new Buffer(r).fill(0),i])),t.d=e(i)),t},exports=module.exports=ECKey;